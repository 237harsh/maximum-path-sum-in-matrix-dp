class Solution{
public:
//memoization
  int sum(int i,int j,int n,vector<vector<int>>&dp,vector<vector<int>> &arr)
  {
      if(i<0||j<0||j>=n||i>=n)return INT_MIN;
      if(i==n-1)return arr[i][j];
      if(dp[i][j]!=-1)return dp[i][j];
      
      int st,lt,rt;
         st=arr[i][j]+sum(i+1,j,n,dp,arr);
         lt=arr[i][j]+sum(i+1,j+1,n,dp,arr);
         rt=arr[i][j]+sum(i+1,j-1,n,dp,arr);
         
         return dp[i][j]=max(st,max(lt,rt));
  }
    int maximumPath(int n, vector<vector<int>> arr)
    {
       vector<vector<int>>dp(n,vector<int>(n,-1));
       /*
        int a=INT_MIN;
        //we can start from any coloumb;
        for(int i=0;i<n;i++)
        {
            int b=sum(0,i,n,dp,arr);
            a=max(a,b);
        }
        return a;*/
    //iniatialise first row in dp array
    //tabulation
  for(int j=0;j<n;j++)
  {
      dp[0][j]=arr[0][j];
      
  }
     
     for(int i=1;i<n;i++)
     {
         for(int j=0;j<n;j++)
         {
            int st=INT_MIN,lt=INT_MIN,rt=INT_MIN;
        
            st=arr[i][j]+dp[i-1][j];
          if(j-1>=0)lt=arr[i][j]+dp[i-1][j-1];
           if(j+1<=n-1)rt=arr[i][j]+dp[i-1][j+1];
           
            dp[i][j]=max(st,max(lt,rt));
         }
     }
     int a=INT_MIN;
     for(int j=0;j<n;j++)
     {
       a=max(a,dp[n-1][j]);
     }
     return a;
        
    }
};
